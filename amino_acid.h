/****************************************************
 * This file is to set all the parameters for amino acids, which include:
 * three letter code,one letter code,atom type, radius for backbone and side chain
 * All the parameters are ordered by the the one letter code
 * Define functions to convert the amino acid and atom types to the index of the parameters
 **************************************************/
#ifndef AMINO_ACID_H
#define AMINO_ACID_H

#include <string>
#include <vector>

using namespace std;

#define NUM_RESIDULE_TYPE 23   //total number of residue types
#define NUM_ATOM_TYPE 39      //total number of atom types
//ordered three letter code
const char rname_three_rank[NUM_RESIDULE_TYPE][4]={
"ALA","ARG","ASN","ASP","ASX","CYS", // ARNDBC
"GLN","GLU","GLX","GLY","HIS","ILE", // QEZGHI
"LEU","LYS","MET","PHE","PRO",       // LKMFP
"SER","THR","TRP","TYR","UNK","VAL"  // STWYUV
}; 
// one letter code ordered by three letter code
const char three2one[NUM_RESIDULE_TYPE+1]="ARNDBCQEZGHILKMFPSTWYUV";
// one letter code ordered by alphabet
const char rname_one_rank[NUM_RESIDULE_TYPE+1]="ABCDEFGHIKLMNPQRSTUVWYZ";
// one letter code ordered by alphabet for 20 standard amino acids
const char rname_one_rank20[21]="ACDEFGHIKLMNPQRSTVWY";
// the rank number of psi-blast according to amino acid
const int aapsi2rank[20]={0,14,11,2,1,13,3,5,6,7,9,8,10,4,12,15,16,18,19,17};
// sorted rank number of psi-blast 
const int aarank2psi[20]={0,4,3,6,13,7,8,9,11,10,12,2,14,5,1,15,16,19,17,18};
// three letter code ordered by one letter code
const char one2three[NUM_RESIDULE_TYPE][4]={
	"ALA","ASX","CYS","ASP","GLU",	//ABCDE
	"PHE","GLY","HIS","ILE","LYS",	//FGHIK
	"LEU","MET","ASN","PRO","GLN",	//LMNPQ
	"ARG","SER","THR","UNK","VAL",	//RSTUV
	"TRP","TYR","GLX"};		//WYZ
//atom types 
static const char atom_name_rank[NUM_ATOM_TYPE][4]={
    "C","CA","CB","CD","CD1","CD2","CE","CE1","CE2","CE3",
    "CG","CG1","CG2","CH2","CZ","CZ2","CZ3","N","ND1",
    "ND2","NE","NE1","NE2","NH1","NH2","NZ","O","O1","O2",
    "OD1","OD2","OE1","OE2","OG","OG1","OH","OXT","SD","SG"};
//0 and 1 to indicate if "A C D E F G H I K L M N P Q R S T V W Y" has side chain chi1 
const int haschi1[20]={0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
// the 4th atome to calculate chi1, 3rd for chi2 and so on
const int atomchi1[20]={-1,38,10,10,10,-1,10,11,10,10,10,10,10,10,10,33,34,11,10,10};
// 0 and 1 to indicate if "A C D E F G H I K L M N P Q R S T V W Y" has side chain chi2 
const int haschi2[20]={0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1};
// the 4th atome to calculate chi2
const int atomchi2[20]={-1,-1,29,3,4,-1,18,4,3,4,37,29,-1,3,3,-1,-1,-1,4,4};
// 0 and 1 to indicate if "A C D E F G H I K L M N P Q R S T V W Y" has side chain chi3 
const int haschi3[20]={0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0};
//the 4th atome to calculate chi3
const int atomchi3[20]={-1,-1,-1,31,-1,-1,-1,-1,6,-1,6,-1,-1,31,20,-1,-1,-1,-1,-1};
// 0 and 1 to indicate if "A C D E F G H I K L M N P Q R S T V W Y" has side chain chi4
const int haschi4[20]={0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0};
//the 4th atome to calculate chi3
const int atomchi4[20]={-1,-1,-1,-1,-1,-1,-1,-1,25,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1};
/*all the amino acids don't have chi5 according to MODELLER
const int haschi5[20]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const int atomchi5[20]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};*/

// the radius of each atom in amino acid order by one letter code and atom type
static double const SAS_ARADIUS[NUM_RESIDULE_TYPE][NUM_ATOM_TYPE]={
{1.72,1.80,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*A*/
{1.72,1.80,1.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*B*/
{1.72,1.80,1.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,1.80}, /*C*/
{1.72,1.80,1.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*D*/
{1.72,1.80,1.90,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,1.50,1.50,0.00,0.00,0.00,1.50,0.00,0.00}, /*E*/
{1.72,1.80,1.90,0.00,1.80,1.80,0.00,1.80,1.80,0.00,1.72,0.00,0.00,0.00,1.80,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*F*/
{1.90,1.80,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*G*/
{1.72,1.80,1.90,0.00,0.00,1.80,0.00,1.80,0.00,0.00,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.55,1.55,0.00,0.00,0.00,1.55,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*H*/
{1.72,1.80,1.80,2.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,1.90,2.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*I*/
{1.72,1.80,1.90,1.90,0.00,0.00,1.90,0.00,0.00,0.00,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.55,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*K*/
{1.72,1.80,1.90,0.00,2.00,2.00,0.00,0.00,0.00,0.00,1.80,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*L*/        
{1.72,1.80,1.90,0.00,0.00,0.00,2.00,0.00,0.00,0.00,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.80,0.00}, /*M*/
{1.72,1.80,1.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*N*/
{1.72,1.80,1.90,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*P*/
{1.72,1.80,1.90,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,1.50,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*Q*/
{1.72,1.80,1.90,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.90,0.00,0.00,0.00,1.72,0.00,0.00,1.55,0.00,0.00,1.55,0.00,0.00,1.55,1.55,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*R*/
{1.72,1.80,1.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,1.50,0.00,0.00,1.50,0.00,0.00}, /*S*/
{1.72,1.80,1.80,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,1.50,0.00,1.50,0.00,0.00}, /*T*/
{0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00}, /*U*/
{1.72,1.80,1.80,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2.00,2.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00},  /*V*/
{1.72,1.80,1.90,0.00,1.80,1.72,0.00,0.00,1.72,1.80,1.72,0.00,0.00,1.80,0.00,1.80,1.80,1.55,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,0.00,0.00}, /*W*/
{1.72,1.80,1.90,0.00,1.80,1.80,0.00,1.80,1.80,0.00,1.72,0.00,0.00,0.00,1.72,0.00,0.00,1.55,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,0.00,0.00,0.00,0.00,1.50,1.50,0.00,0.00}, /*Y*/
{1.72,1.80,1.90,1.72,0.00,0.00,0.00,0.00,0.00,0.00,1.90,0.00,0.00,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,0.00,1.55,0.00,0.00,0.00,1.50,1.50,1.50,0.00,0.00,1.50,1.50,0.00,0.00,0.00,1.50,0.00,0.00} /*Z*/
};
// the atom types to all 20 standard amino acid and there are 40 atom types in total according to (Melo and Feytmans,1997)
// 167 atoms in total, the left side of "=" doesn't exist but the right side
static int const Atomtype40[20][NUM_ATOM_TYPE]={ 
      	/* C,CA,CB,CD,CD1CD2CE,CE1CE2CE3CG,CG1CG2CH2CZ,CZ2CZ3 N,ND1ND2NE,NE1NE2NH1NH2NZ, O,O1,O2,OD1OD2OE1OE2OG,OG1OH,OXTSD,SG*/
	{ 4, 1, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*A ALA 5*/
	{ 4, 1,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19},/*C CYS 6*/
	{ 4, 1, 8,-1,-1,-1,-1,-1,-1,-1,27,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,28,28,-1,-1,-1,-1,-1,-1,-1,-1},/*D ASP 8*/
	{ 4, 1, 8,27,-1,-1,-1,-1,-1,-1, 8,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,28,28,-1,-1,-1,-1,-1,-1},/*E GLU 9*/
	{ 4, 1, 8,-1,12,12,-1,12,12,-1,11,-1,-1,-1,12,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*F PHE 11*/
	{ 4, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*G GLY 4*/
	{ 4, 1, 8,-1,-1,24,-1,26,-1,-1,23,-1,-1,-1,-1,-1,-1, 3,38,-1,-1,-1,25,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*H HIS 10*/
	{ 4, 1, 7,-1, 6,-1,-1,-1,-1,-1,-1, 8, 6,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*I ILE 8*/
	{ 4, 1, 8, 8,-1,-1,35,-1,-1,-1, 8,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,20, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*K LYS 9*/
	{ 4, 1, 8,-1, 6, 6,-1,-1,-1,-1, 7,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*L LEU 8*/
	{ 4, 1, 8,-1,-1,-1,30,-1,-1,-1,29,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 9,-1},/*M MET 8*/
	{ 4, 1, 8,-1,-1,-1,-1,-1,-1,-1,33,-1,-1,-1,-1,-1,-1, 3,-1,18,-1,-1,-1,-1,-1,-1, 5,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*N ASN 8*/
	{ 4, 1, 8,32,-1,-1,-1,-1,-1,-1, 8,-1,-1,-1,-1,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*P PRO 7*/
	{ 4, 1, 8,33,-1,-1,-1,-1,-1,-1, 8,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,18,-1,-1,-1, 5,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1},/*Q GLN 9*/
	{ 4, 1, 8,37,-1,-1,-1,-1,-1,-1, 8,-1,-1,-1,21,-1,-1, 3,-1,-1,36,-1,-1,22,22,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*R ARG 11*/
	{ 4, 1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,16,-1,-1,-1,-1,-1},/*S SER 6*/
	{ 4, 1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,16,-1,-1,-1,-1},/*T THR 7G*/
	{ 4, 1, 7,-1,-1,-1,-1,-1,-1,-1,-1, 6, 6,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*V VAL 7*/
	{ 4, 1, 8,-1,24,11,-1,-1,14,12,13,-1,-1,12,12,12,12, 3,-1,-1,-1,39,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*W TRP 14 CZ2=CZ3*/
	{ 4, 1, 8,-1,12,12,-1,12,12,-1,11,-1,-1,-1,31,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,40,-1,-1,-1},/*Y TYR 12*/
};
static int const Atomtype_T32S3[20][NUM_ATOM_TYPE]={
	//C CA CB CD CD1 CD2 CE CE1 CE2 CE3 CG CG1 CG2 CH2 CZ CZ2 CZ3 N ND1 ND2 NE NE1 NE2 NH1 NH2 NZ O O1  O2  OD1 OD2 OE1 OE2 OG OG1 OH OXT SD SG
    //0 1  2  3   4   5   6  7  8    9  10  11  12  13 14  15  16 17 18  19 20 21  22   23  24 25 26 27 28  29   30 31  32  33  34 35 36  37  38      
//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 
{ 2, 4, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*A ALA 0*/
{ 2, 4,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20},/*C CYS 1*/
{ 2, 4,29,-1,-1,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,31,31,-1,-1,-1,-1,-1,-1,-1,-1},/*D ASP 2*/
{ 2, 4, 6,30,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,31,31,-1,-1,-1,-1,-1,-1},/*E GLU 3*/
{ 2, 4, 6,-1, 7, 7,-1, 7, 7,-1, 7,-1,-1,-1, 7,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*F PHE 4*/
{ 2, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*G GLY 5*/
{ 2, 4, 6,-1,-1,21,-1,23,-1,-1,21,-1,-1,-1,-1,-1,-1, 1,22,-1,-1,-1,22,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*H HIS 6*/
{ 2, 4, 6,-1, 5,-1,-1,-1,-1,-1,-1, 6, 5,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*I ILE 7*/
{ 2, 4, 6, 6,-1,-1,16,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1, 0, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*K LYS 8*/
{ 2, 4, 6,-1, 5, 5,-1,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*L LEU 9*/
{ 2, 4, 6,-1,-1,-1,15,-1,-1,-1,13,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,14,-1},/*M MET 10*/
{ 2, 4, 6,-1,-1,-1,-1,-1,-1,-1, 2,-1,-1,-1,-1,-1,-1, 1,-1,28,-1,-1,-1,-1,-1,-1, 3,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*N ASN 11*/
{ 2,18, 6,18,-1,-1,-1,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*P PRO 12*/
{ 2, 4, 6, 2,-1,-1,-1,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,28,-1,-1,-1, 3,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1},/*Q GLN 13*/
{ 2, 4, 6,24,-1,-1,-1,-1,-1,-1, 6,-1,-1,-1,26,-1,-1, 1,-1,-1,25,-1,-1,27,27,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*R ARG 14*/
{ 2, 4,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1, 9,-1,-1,-1,-1,-1},/*S SER 15*/
{ 2, 4,17,-1,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1, 9,-1,-1,-1,-1},/*T THR 16*/
{ 2, 4, 6,-1,-1,-1,-1,-1,-1,-1,-1, 5, 5,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*V VAL 17*/
{ 2, 4, 6,-1,11,10,-1,-1,11, 7,10,-1,-1, 7,-1, 7, 7, 1,-1,-1,-1,12,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*W TRP 18*/
{ 2, 4, 6,-1, 7, 7,-1, 7, 7,-1, 7,-1,-1,-1, 8,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1, 9,-1,-1,-1},/*Y TYR 19*/
//NX NH CO OC CAH CH3 CH2 CFH CZ OH CGTR CHTR NDHS CH2M SM CH3M CH2K CH2S CHPR CH2C SH CGHP NDHP CHEP CR2 NR1 CR3 NR2 NAS CH2B CX1 OX1
// 0 1  2   3  4  5    6   7   8 9  10   11   12   13  14  15  16    17  18    19   20  21  22    23  24  25  26 27  28   29  30   31
};
static int const Atomtype_FS[20][NUM_ATOM_TYPE]={//
//C CA CB CD CD1 CD2 CE CE1 CE2 CE3 CG CG1 CG2 CH2 CZ CZ2 CZ3 N ND1 ND2 NE NE1 NE2 NH1 NH2 NZ O O1  O2  OD1 OD2 OE1 OE2 OG OG1 OH OXT SD SG
//0 1  2  3   4   5   6  7  8    9  10  11  12  13 14  15  16 17 18  19 20 21  22   23  24 25 26 27 28  29   30 31  32  33  34 35 36  37  38      
//0 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 
{2, 1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*A,ALA,5*/
{2, 1, 7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,26},/*C,CYS,6*/
{2, 1, 6,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,24,24,-1,-1,-1,-1,-1,-1,-1,-1},/*D,ASP,8*/
{2, 1,11,23,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,24,24,-1,-1,-1,-1,-1,-1},/*E,GLU,9*/
{2, 1, 8,-1,17,17,-1,20,20,-1,13,-1,-1,-1,20,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*F,PHE, 11*/
{2, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*G,GLY,4*/
{2, 1, 8,-1,-1,18,-1,18,-1,-1,13,-1,-1,-1,-1,-1,-1, 0,27,-1,-1,-1,27,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*H,HIS, 1-1*/
{2, 1, 9,-1,14,-1,-1,-1,-1,-1,-1,14,14,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*I,ILE,8*/
{2, 1,11,16,-1,-1,19,-1,-1,-1,16,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,28, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*K,LYS,9*/
{2, 1, 7,-1,15,15,-1,-1,-1,-1, 9,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*L,LEU,8*/
{2, 1, 7,-1,-1,-1,15,-1,-1,-1,14,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,14,-1},/*M,MET,8*/
{2, 1, 6,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1, 0,-1,25,-1,-1,-1,-1,-1,-1, 3,-1,-1,24,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*N,ASN,8*/
{2, 1,11,16,-1,-1,-1,-1,-1,-1,16,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*P,PRO,7*/
{2, 1,11,23,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,25,-1,-1,-1, 3,-1,-1,-1,-1,24,-1,-1,-1,-1,-1,-1,-1},/*Q,GLN,9*/
{2, 1,11,19,-1,-1,-1,-1,-1,-1,16,-1,-1,-1,22,-1,-1, 0,-1,-1,22,-1,-1,22,22,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*R,ARG, 11*/
{2, 1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1, 29,-1,-1,-1,-1,-1},/*S,SER,6*/
{2, 1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1},/*T,THR,7G*/
{2, 1, 9,-1,-1,-1,-1,-1,-1,-1,-1,15,15,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*V,VAL,7*/
{2, 1, 8,-1,17,17,-1,-1,20,20,13,-1,-1,20,-1,20,20, 0,-1,-1,-1,27,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},/*W,TRP, 14,CZ1=CZ1*/
{2, 1, 8,-1,17,17,-1,20,20,-1,13,-1,-1,-1,21,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1}/*Y,TYR, 12*/
};


// all the atoms appear in each amino acid, 167 in total
static int const AtominAA[20][NUM_ATOM_TYPE]={
//0 1 2 3 4 5 6 7 8 910 1 2 3 4 5 6 7 8 920 1 2 3 4 5 6 7 8 930 1 2 3 4 5 6 7 8 
{1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*A,ALA,5*/
{1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},/*C,CYS,6*/
{1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0},/*D,ASP,8*/
{1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0},/*E,GLU,9*/
{1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*F,PHE,11*/
{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*G,GLY,4*/
{1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*H,HIS,10*/
{1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*I,ILE,8*/
{1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},/*K,LYS,9*/
{1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*L,LEU,8*/
{1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0},/*M,MET,8*/
{1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0},/*N,ASN,8*/
{1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*P,PRO,7*/
{1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},/*Q,GLN,9*/
{1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*R,ARG,11*/
{1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0},/*S,SER,6*/
{1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0},/*T,THR,7G*/
{1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*V,VAL,7*/
{1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},/*W,TRP,14,CZ1=CZ1*/
{1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0}/*Y,TYR,12*/
};
static int const SideAtom[20][NUM_ATOM_TYPE]={
//0 1 2 3 4 5 6 7 8 910 1 2 3 4 5 6 7 8 920 1 2 3 4 5 6 7 8 930 1 2 3 4 5 6 7 8 
 {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*A,ALA,5*/
 {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},/*C,CYS,6*/
 {0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},/*D,ASP,8*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},/*E,GLU,9*/
 {0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*F,PHE,11*/
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*G,GLY,4*/
 {0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*H,HIS,10*/
 {0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*I,ILE,8*/
 {0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},/*K,LYS,9*/
 {0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*L,LEU,8*/
 {0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},/*M,MET,8*/
 {0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},/*N,ASN,8*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*P,PRO,7*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},/*Q,GLN,9*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*R,ARG,11*/
 {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},/*S,SER,6*/
 {0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},/*T,THR,7G*/
 {0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*V,VAL,7*/
 {0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*W,TRP,14,CZ1=CZ1*/
 {0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0}/*Y,TYR,12*/
};

// the atom used as the center of side chain to calculate HRSC potential
static int const SideAtom_HRSC[20][NUM_ATOM_TYPE]={
//0 1 2 3 4 5 6 7 8 910 1 2 3 4 5 6 7 8 920 1 2 3 4 5 6 7 8 930 1 2 3 4 5 6 7 8 
 {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*A,ALA,5*/
 {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},/*C,CYS,6*/
 {0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*D,ASP,8*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*E,GLU,9*/
 {0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*F,PHE,11*/
 {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*G,GLY,4*/
 {0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*H,HIS,10*/
 {0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*I,ILE,8*/
 {0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*K,LYS,9*/
 {0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*L,LEU,8*/
 {0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},/*M,MET,8*/
 {0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*N,ASN,8*/
 {0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*P,PRO,7*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*Q,GLN,9*/
 {0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*R,ARG,11*/
 {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*S,SER,6*/
 {0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*T,THR,7G*/
 {0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*V,VAL,7*/
 {0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},/*W,TRP,14,CZ1=CZ1*/
 {0,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}/*Y,TYR,12*/
};
// the redius for side chain
const double AA_SideR[23]={
	1.702,3.686,2.490,2.686,2.884,//ABCDE
	3.104,0.690,2.985,2.655,2.871,//FGHIK
	2.655,2.910,2.671,2.379,2.871,//LMNPQ
	3.203,2.168,2.454,2.624,2.417,//RSTUV
	3.495,3.276,2.871};//WYZ



/***************************************************
 * Binary search to convert three letter code to one letter code, if no match then return U
 ***************************************************/
char residulename321(const char *);

/***************************************************
 * Binary search to convert one letter code to three letter code, if no match then return U
 ***************************************************/
void residulename123(const char,char *);

/*************************************************
 * convert amino acid code into the index of parameter array
 ************************************************/
// one letter code to index ranging in [0,22]
int Rname2ID(const char c);
// three letter code to index ranging in [0,22]
int Rname2ID(const char* three);
//For 20 standard amino acids, one letter code to index ranging in [0,19], -1 if no match
int Rname2ID20(const char c);
//For 20 standard amino acids, three letter code to index ranging in [0,19], -1 if no match
int Rname2ID20(const char* three);
/****************************************************
 * convert atom type to index of parameter array
 ***************************************************/
 int Atomname2ID(const char* atom);

/****************************************************
 * Convert to Uppercase
 ***************************************************/
void Upper(string& str);


/************************************************************
 * Binary search a string in threename between l and r, return the index if found otherwise return -1
 ***********************************************************/
int BinarySearchStr(const char threename[][4],const char *str,int l,int r);
/************************************************************
 * Binary search a string in threename between l and r, return the index if found otherwise return -1
 ***********************************************************/
int BinarySearchChar(const char *str,const char c,int l,int r);

#endif
